package lt.petuska.npm.publish.dsl

import lt.petuska.npm.publish.delegate.fallbackDelegate
import lt.petuska.npm.publish.delegate.gradleNullableProperty
import lt.petuska.npm.publish.delegate.or
import lt.petuska.npm.publish.delegate.propertyDelegate
import lt.petuska.npm.publish.util.notFalse
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.file.CopySpec
import org.gradle.api.tasks.Copy
import org.jetbrains.kotlin.gradle.targets.js.ir.JsBinary
import org.jetbrains.kotlin.gradle.targets.js.ir.JsIrBinary
import org.jetbrains.kotlin.gradle.targets.js.ir.Library
import org.jetbrains.kotlin.gradle.targets.js.npm.NpmDependency
import org.jetbrains.kotlin.gradle.tasks.Kotlin2JsCompile
import java.io.File

/**
 * NPM publication (package) configuration container
 */
class NpmPublication internal constructor(
  /**
   * Publication name. Always in lowerCamelCase.
   */
  val name: String,
  private val project: Project,
  extension: NpmPublishExtension,
  /**
   * A container for package's npm dependencies
   */
  val npmDependencies: MutableList<NpmDependency> = mutableListOf()
) {
  private val propGroup = "$PROP_PREFIX.$name"

  /**
   * Flag to bundle kotlin-only dependencies.
   * Defaults to true and only works for autogenerated kotlin publications.
   */
  var bundleKotlinDependencies: Boolean by project.propertyDelegate(propGroup) { it.notFalse() } or extension.fallbackDelegate(NpmPublishExtension::bundleKotlinDependencies)

  /**
   * Flag to add bundled dependencies to npm-shrinkwrap.json.
   * Defaults to true.
   */
  var shrinkwrapBundledDependencies: Boolean by project.propertyDelegate(propGroup) { it.notFalse() } or extension.fallbackDelegate(NpmPublishExtension::shrinkwrapBundledDependencies)

  /**
   * Optional npm scope. If set, package name will be constructed as `@{scope}/{moduleName}`.
   * Defaults to [NpmPublishExtension.organization].
   */
  var scope: String? by project.propertyDelegate(propGroup) { it } or extension.fallbackDelegate(NpmPublishExtension::organization)

  /**
   * NPM module name.
   * Defaults to [Project.getName].
   */
  var moduleName: String by project.propertyDelegate(propGroup) { it } or project.fallbackDelegate { this.name }

  /**
   * NPM package version.
   * Defaults to [NpmPublishExtension.version].
   */
  var version: String? by project.propertyDelegate(propGroup) { it } or extension.fallbackDelegate(NpmPublishExtension::version)

  /**
   * Main js entry file. Can also be set via [packageJson] DSL.
   * @see [PackageJson.main]
   */
  var main: String? by project.propertyDelegate(propGroup) { it }

  /**
   * Main d.ts entry file. Can also be set via [packageJson] DSL.
   * @see [PackageJson.types]
   */
  var types: String? by project.propertyDelegate(propGroup) { it }

  /**
   * A location of the main README file.
   * If set, the file will be moved to package assembly root and renamed to README.MD (regardless of the actual name).
   * Defaults to [NpmPublishExtension.readme]
   */
  var readme: File? by project.propertyDelegate(propGroup) { File(it) } or extension.fallbackDelegate(NpmPublishExtension::readme)

  /**
   * Base NodeJS directory to be used when building and publishing the publication. Defaults to 'NODE_HOME' env variable.
   */
  var nodeJsDir by project.propertyDelegate(propGroup, System.getenv("NODE_HOME")?.let(::File)) { File(it) }

  /**
   * Publication assembly directory.
   * Defaults to `${project.buildDir}/publications/npm/${this.name}`
   */
  var destinationDir: File by project.propertyDelegate(propGroup) { File(it) } or
    project.fallbackDelegate { File("${this.buildDir}/publications/npm/${this@NpmPublication.name}") }

  internal var binary by project.gradleNullableProperty<JsBinary>()

  internal val kotlinDestinationDir: File?
    get() = kotlinMainTask?.let {
      when (it) {
        is Kotlin2JsCompile -> it.outputFile.parentFile
        is Copy -> it.destinationDir
        else -> null
      }
    }

  internal val kotlinMainTask: Task? // Kotlin2JsCompile | Copy
    get() = binary?.let {
      when (it) {
        is JsIrBinary -> when (it) {
          is Library -> it.linkSyncTask.orNull
          else -> null
        }
        else -> it.compilation.compileKotlinTask
      }
    }

  internal val compileKotlinTask: Kotlin2JsCompile?
    get() = binary?.let {
      when (it) {
        is JsIrBinary -> when (it) {
          is Library -> it.linkTask.orNull
          else -> null
        }
        else -> it.compilation.compileKotlinTask
      }
    }

  var fileSpecs = mutableListOf<CopySpec.(File) -> Unit>()

  internal var packageJsonSpecs = mutableListOf<PackageJson.() -> Unit>()

  /**
   * If set, fully disregards [packageJson] DSL configuration and used the specified raw package.json file as-is.
   */
  var packageJsonFile by project.gradleNullableProperty<File>()

  /**
   * Similar to [packageJsonFile] except allows the options to be overridden by the [packageJson] DSL.
   */
  var packageJsonTemplateFile by project.gradleNullableProperty<File>()

  /**
   * If [packageJsonFile] is not set and this property is set, ignore any further package.json generation configs produced by DSLs
   */
  var packageJson by project.gradleNullableProperty<(PackageJson.() -> Unit)>()

  /**
   * DSL builder to configure generated package.json file.
   */
  fun packageJson(config: PackageJson.() -> Unit) {
    packageJsonSpecs.add(config)
  }

  /**
   * DSL Builder to configure the files that compose this publication.
   */
  fun files(config: CopySpec.(destinationDir: File) -> Unit) {
    fileSpecs.add(config)
  }

  /**
   * DSL builder to configure NPM dependencies for this publication.
   */
  fun dependencies(config: MutableList<NpmDependency>.() -> Unit) = npmDependencies.config()
  fun MutableList<NpmDependency>.dependency(name: String, version: String, scope: NpmDependency.Scope) = NpmDependency(project, name, version, scope, false).also {
    add(it)
  }

  /**
   * Adds a [regular](https://docs.npmjs.com/files/package.json#dependencies) npm dependency.
   */
  fun MutableList<NpmDependency>.npm(name: String, version: String) = dependency(name, version, NpmDependency.Scope.NORMAL)

  /**
   * Adds a [dev](https://docs.npmjs.com/files/package.json#devdependencies) npm dependency.
   */
  fun MutableList<NpmDependency>.npmDev(name: String, version: String) = dependency(name, version, NpmDependency.Scope.DEV)

  /**
   * Adds an [optional](https://docs.npmjs.com/files/package.json#optionaldependencies) npm dependency.
   */
  fun MutableList<NpmDependency>.npmOptional(name: String, version: String) = dependency(name, version, NpmDependency.Scope.OPTIONAL)

  /**
   * Adds a [peer](https://docs.npmjs.com/files/package.json#peerdependencies) npm dependency.
   */
  fun MutableList<NpmDependency>.npmPeer(name: String, version: String) = dependency(name, version, NpmDependency.Scope.PEER)

  internal fun validate(alternativeNodeJsDir: File?): NpmPublication? {
    nodeJsDir = nodeJsDir ?: alternativeNodeJsDir
    return takeIf { (version != null || packageJsonTemplateFile != null) && nodeJsDir != null }
  }

  companion object {
    const val PROP_PREFIX = "publication"
  }
}
