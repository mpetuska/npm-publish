{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#npm-publish-gradle-plugin","title":"NPM-PUBLISH GRADLE PLUGIN","text":"<p>Gradle plugin enabling NPM publishing (essentially <code>maven-publish</code> for NPM packages). Integrates seamlessly with Kotlin/JS/MPP plugin if applied, providing auto configurations.</p> <p>Check the latest release for verified JVM, Kotlin and Gradle tooling versions</p>"},{"location":"#setup","title":"Setup","text":"<p>Here's a bare minimum setup when using together with one of the kotlin plugins. This setup would produce the following tasks:</p> <ul> <li><code>assembleJsPackage</code></li> <li><code>packJsPackage</code></li> <li><code>publishJsPackageToNpmjsRegistry</code></li> </ul> build.gradle.kts<pre><code>plugins {\n    id(\"dev.petuska.npm.publish\") version \"&lt;VERSION&gt;\"\n    kotlin(\"multiplatform\") version \"&lt;VERSION&gt;&gt;\" // Optional, also supports \"js\"\n}\n\nkotlin {\n    js(IR) {\n        binaries.library()\n        browser() // or nodejs()\n    }\n}\n\nnpmPublish {\n    registries {\n        // For registries expecting an authentiation token, use authToken\n        register(\"npmjs\") {\n            uri.set(\"https://registry.npmjs.org\")\n            authToken.set(\"obfuscated\")\n        }\n\n        // For registries expecting a username and password, use auth or username + password\n        register(\"nexus\") {\n            uri.set(\"https://nexus.example.com/repository/npm-internal\")\n            username.set(\"obfuscated\")\n            password.set(\"obfuscated\")\n            // Or:\n            // auth.set(\"base64-encoded-string\")\n        }\n    }\n}\n</code></pre> <p>Full documentation can be found on npm-publish.petuska.dev</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See CONTRIBUTING</p> <p>Thanks to all the people who contributed to npm-publish!</p> <p> </p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"CHANGELOG/#verified-versions","title":"Verified Versions","text":"<ul> <li>Kotlin: 2.1.0</li> <li>Gradle: 8.12</li> <li>JDK: 21</li> </ul>"},{"location":"CHANGELOG/#added","title":"Added","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":""},{"location":"CHANGELOG/#removed","title":"Removed","text":""},{"location":"CHANGELOG/#352","title":"3.5.2","text":""},{"location":"CHANGELOG/#verified-versions_1","title":"Verified Versions","text":"<ul> <li>Kotlin: 2.1.0</li> <li>Gradle: 8.12</li> <li>JDK: 21</li> </ul>"},{"location":"CHANGELOG/#added_1","title":"Added","text":""},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Fix #181 - npm commands are failing when node is not on PATH.</li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":""},{"location":"CHANGELOG/#351","title":"3.5.1","text":""},{"location":"CHANGELOG/#verified-versions_2","title":"Verified Versions","text":"<ul> <li>Kotlin: 2.1.0</li> <li>Gradle: 8.12</li> <li>JDK: 21</li> </ul>"},{"location":"CHANGELOG/#added_2","title":"Added","text":""},{"location":"CHANGELOG/#changed_2","title":"Changed","text":""},{"location":"CHANGELOG/#117-make-task-actions-non-private","title":"117 Make task actions non-private","text":""},{"location":"CHANGELOG/#removed_2","title":"Removed","text":""},{"location":"CHANGELOG/#350","title":"3.5.0","text":""},{"location":"CHANGELOG/#verified-versions_3","title":"Verified Versions","text":"<ul> <li>Kotlin: 2.1.0</li> <li>Gradle: 8.10</li> <li>JDK: 21</li> </ul>"},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Auth, username and password properties of registries.</li> <li>K2 support</li> <li><code>.npmrc</code> support</li> <li>Options to customise <code>node</code> and <code>npm</code> executables.</li> </ul>"},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Version upgrades</li> <li>Licence changed to The Unlicense</li> </ul>"},{"location":"CHANGELOG/#removed_3","title":"Removed","text":""},{"location":"CHANGELOG/#342","title":"3.4.2","text":"<p>This is a maintenance release with a few minor bugfixes.</p>"},{"location":"CHANGELOG/#verified-versions_4","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.9.22</li> <li>Gradle: 8.5</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_4","title":"Added","text":""},{"location":"CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>Upgraded dependencies</li> <li>Switched out <code>com.netflix.nebula.node</code> plugin hook for node autoconfig to <code>com.github.node-gradle.node</code> plugin which   it depends on</li> <li>Implemented a patch for older KGP users to remedy https://youtrack.jetbrains.com/issue/KT-59523 when using ESM</li> </ul>"},{"location":"CHANGELOG/#removed_4","title":"Removed","text":""},{"location":"CHANGELOG/#341","title":"3.4.1","text":""},{"location":"CHANGELOG/#verified-versions_5","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.9.0</li> <li>Gradle: 8.2.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li>Utility DSL to set NpmRegistry::uri via Provider"},{"location":"CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li>Added trailing slashes to npmjs and github registry convenience DSL URIs</li> <li>Fixed configuration cache issues with Boolean property chains</li> </ul>"},{"location":"CHANGELOG/#removed_5","title":"Removed","text":""},{"location":"CHANGELOG/#341_1","title":"3.4.1","text":""},{"location":"CHANGELOG/#verified-versions_6","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.9.0</li> <li>Gradle: 8.2.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li>Utility DSL to set NpmRegistry::uri via Provider"},{"location":"CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>Added trailing slashes to npmjs and github registry convenience DSL URIs</li> <li>Fixed configuration cache issues with Boolean property chains</li> </ul>"},{"location":"CHANGELOG/#removed_6","title":"Removed","text":""},{"location":"CHANGELOG/#340","title":"3.4.0","text":"<p>This is a maintenance release with a few minor bugfixes.</p>"},{"location":"CHANGELOG/#verified-versions_7","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.9.0</li> <li>Gradle: 8.2.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_7","title":"Added","text":"<ul> <li>Gradle configuration cache support</li> <li>New Local TS consumer setup sample</li> </ul>"},{"location":"CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li>All sandbox modules and samples have been migrated away from deprecated kotlin/js plugin.</li> <li>Upgraded dependency versions</li> <li>Deprecated kotlin/js plugin integration</li> </ul>"},{"location":"CHANGELOG/#removed_7","title":"Removed","text":""},{"location":"CHANGELOG/#331","title":"3.3.1","text":""},{"location":"CHANGELOG/#verified-versions_8","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.8.21</li> <li>Gradle: 8.1.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_8","title":"Added","text":""},{"location":"CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>Fixed gradle provider chain for nebula node plugin integration</li> <li>Fixed incorrect NodeExec task command line builds and expanded logging</li> </ul>"},{"location":"CHANGELOG/#removed_8","title":"Removed","text":""},{"location":"CHANGELOG/#330","title":"3.3.0","text":""},{"location":"CHANGELOG/#verified-versions_9","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.8.21</li> <li>Gradle: 8.1.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_9","title":"Added","text":"<ul> <li>New <code>tag</code> option for <code>NpmPublishTask</code></li> <li>Integration with <code>com.github.node-gradle.node</code> to allow publishing without having NodeJS installed when   kotlin plugin is not being used</li> </ul>"},{"location":"CHANGELOG/#changed_9","title":"Changed","text":"<ul> <li>Modified KDoc of properties affected by gradle 8.1.1 new resolution strategy. tl;dr; they now require explicit <code>this</code>   receiver</li> <li>Replaced <code>refreshVersions</code> plugin with gradle catalogs</li> <li>Upgraded internal dependencies</li> <li>Fixed <code>otp</code> option not being properly propagated to npm executable</li> </ul>"},{"location":"CHANGELOG/#removed_9","title":"Removed","text":""},{"location":"CHANGELOG/#321","title":"3.2.1","text":""},{"location":"CHANGELOG/#verified-versions_10","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.8.10</li> <li>Gradle: 7.6</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_10","title":"Added","text":""},{"location":"CHANGELOG/#changed_10","title":"Changed","text":"<ul> <li>Pegged plugin compile kotlin version against gradle's <code>embeddedKotlinVersion</code></li> <li>Removed <code>gson</code> dependency and replaced usages with groovy's <code>JsonSlurper</code></li> </ul>"},{"location":"CHANGELOG/#removed_10","title":"Removed","text":""},{"location":"CHANGELOG/#320-2022-12-28","title":"3.2.0 - 2022-12-28","text":""},{"location":"CHANGELOG/#verified-versions_11","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.8.0</li> <li>Gradle: 7.5.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_11","title":"Added","text":"<ul> <li>New samples project containing examples of various use-cases the plugin is able to cover.</li> <li><code>@DslMarkers</code> to plugin's DSL to prevent incorrect nested property usage.</li> <li>Pull transitive npm dependencies from project dependencies via <code>publicPackageJson</code></li> <li>New accessors for assemble and pack tasks inside package DSL</li> <li>KGP 1.8.0 support.</li> </ul>"},{"location":"CHANGELOG/#changed_11","title":"Changed","text":"<ul> <li>Fix #73: <code>nodeHome</code> override not working when used with kotlin plugin</li> </ul>"},{"location":"CHANGELOG/#removed_11","title":"Removed","text":"<ul> <li>Support for KGP &lt; 1.8.0!!! DO NOT UPGRADE IF YOU'RE ON OLDER KOTLIN VERSION</li> </ul>"},{"location":"CHANGELOG/#310-2022-11-07","title":"3.1.0 - 2022-11-07","text":""},{"location":"CHANGELOG/#verified-versions_12","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.6.21</li> <li>Gradle: 7.5.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_12","title":"Added","text":""},{"location":"CHANGELOG/#changed_12","title":"Changed","text":"<ul> <li>Updated dependency versions</li> <li>Configuration cache support</li> </ul>"},{"location":"CHANGELOG/#removed_12","title":"Removed","text":""},{"location":"CHANGELOG/#301-2022-06-27","title":"3.0.1 - 2022-06-27","text":""},{"location":"CHANGELOG/#verified-versions_13","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.7.0</li> <li>Gradle: 7.4.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_13","title":"Added","text":""},{"location":"CHANGELOG/#changed_13","title":"Changed","text":"<ul> <li>Kotlin version bumped to <code>1.7.0</code></li> <li>Downgraded language version to <code>1.4</code> for better gradle support</li> </ul>"},{"location":"CHANGELOG/#removed_13","title":"Removed","text":""},{"location":"CHANGELOG/#300-2022-05-03","title":"3.0.0 - 2022-05-03","text":""},{"location":"CHANGELOG/#verified-versions_14","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.6.21</li> <li>Gradle: 7.4.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_14","title":"Added","text":"<ul> <li>New documentation site</li> <li>Functional and Integration test coverage</li> <li>Gradle caching support for configuration, <code>NpmAssembleTask</code> and <code>NpmPackTask</code> (including remote caches)</li> <li>Detekt analyser and formatter</li> </ul>"},{"location":"CHANGELOG/#changed_14","title":"Changed","text":"<ul> <li>Kotlin plugin version bumped to <code>1.6.20</code></li> <li><code>npmPublishing</code> extension renamed to <code>npmPublish</code></li> <li>Default packaging directories changed from <code>build/publications/npm</code> to <code>build/packages</code></li> <li><code>publication</code> and <code>repository</code> DSLs removed. Use regular gradle's <code>register</code> DSL</li> <li>All API reworked to use gradle provider API. Replace all <code>=</code> assignments with proper <code>.set()</code> invocation.</li> <li><code>NpmPackageAssembleTask</code> renamed to <code>NpmAssembleTask</code></li> <li><code>NpmPackage::moduleName</code> renamed to <code>NpmPackage::packageName</code></li> <li><code>NpmPackage::nodeJsDir</code> renamed to <code>nodeHome</code> and moved to <code>NpmPublishExtension</code>. It is now shared across all   publications.</li> <li><code>NpmPackage::destinationDir</code> moved to <code>NpmAssembleTask</code>.</li> <li><code>NpmRegistry::dry</code> propagated to <code>NpmPackTask</code> and <code>NpmPublishTask</code> with <code>--dry</code> cli option added. Both still default   to <code>NpmPublishExtension::dry</code></li> <li>All plugin tasks made a lot more abstract and reusable. Especially <code>NodeExecTask</code> and <code>NpmExecTask</code> allowing for   custom npm script execution on your packages or any other generic tooling.</li> </ul>"},{"location":"CHANGELOG/#removed_14","title":"Removed","text":"<ul> <li>Support for <code>LEGACY</code> compiler. Stick with <code>2.1.x</code> if you still depend on it.</li> <li>All eager configuration</li> <li>Custom kotlin delegates for gradle lazy api</li> <li><code>dev.petuska:kon</code> dependency</li> <li><code>dev.petuska:gradle-lazy-delegates</code> dependency</li> <li><code>dev.petuska:klip</code> dependency</li> <li>All kotest dependencies</li> <li>Spotless plugin</li> </ul>"},{"location":"CHANGELOG/#212-2022-01-24","title":"2.1.2 - 2022-01-24","text":""},{"location":"CHANGELOG/#verified-versions_15","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.6.10</li> <li>Gradle: 7.3.3</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_15","title":"Added","text":""},{"location":"CHANGELOG/#changed_15","title":"Changed","text":"<ul> <li>Kotlin plugin version bumped to <code>1.6.10</code></li> <li>Simplified <code>JsonObject</code> DSL builders by rebasing it onto <code>dev.petuska:kon</code></li> <li>Implemented proper nested <code>package.json</code> template merging</li> <li>Rolled back to good old <code>ktlint</code> formatting</li> </ul>"},{"location":"CHANGELOG/#removed_15","title":"Removed","text":""},{"location":"CHANGELOG/#211-2021-09-02","title":"2.1.1 - 2021-09-02","text":""},{"location":"CHANGELOG/#verified-versions_16","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.30</li> <li>Gradle: 7.2.0</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_16","title":"Added","text":"<ul> <li>Sample GH action introduced to showcase CI publishing</li> </ul>"},{"location":"CHANGELOG/#changed_16","title":"Changed","text":"<ul> <li>Fixed #24: <code>types</code> configuration property was ignored</li> <li>Reworked ts-consumer to showcase module inter-dependencies</li> </ul>"},{"location":"CHANGELOG/#removed_16","title":"Removed","text":""},{"location":"CHANGELOG/#210-2021-08-22","title":"2.1.0 - 2021-08-22","text":""},{"location":"CHANGELOG/#verified-versions_17","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.21</li> <li>Gradle: 7.2.0</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_17","title":"Added","text":"<ul> <li>Added support for setting configuration properties via environment variables too</li> </ul>"},{"location":"CHANGELOG/#changed_17","title":"Changed","text":"<ul> <li>Fixed #24: <code>types</code> configuration property was ignored</li> <li>Kotlin version bumped to <code>1.5.21</code></li> </ul>"},{"location":"CHANGELOG/#removed_17","title":"Removed","text":""},{"location":"CHANGELOG/#204-2021-07-21","title":"2.0.4 - 2021-07-21","text":""},{"location":"CHANGELOG/#verified-versions_18","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.10</li> <li>Gradle: 7.1.1</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_18","title":"Added","text":"<ul> <li>New sandbox module to check that plugin can work with both, nodejs() and browser() flavours at the same time</li> <li>New <code>ts-consumer</code> module in the sandbox to showcase how to include packed K/JS modules into plain TS module</li> <li>Dynamic version ranges for increased compatibility</li> </ul>"},{"location":"CHANGELOG/#changed_18","title":"Changed","text":"<ul> <li>Updated versions</li> <li>Fixed a bug that always expected version to be a string</li> </ul>"},{"location":"CHANGELOG/#removed_18","title":"Removed","text":"<ul> <li>Removed some duplicated code in sandbox</li> </ul>"},{"location":"CHANGELOG/#203-2021-06-18","title":"2.0.3 - 2021-06-18","text":""},{"location":"CHANGELOG/#verified-versions_19","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.10</li> <li>Gradle: 7.0.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_19","title":"Added","text":""},{"location":"CHANGELOG/#changed_19","title":"Changed","text":"<ul> <li>#19 <code>licence</code> field typo fix to get it working with npm (big thanks to @gaebel)</li> </ul>"},{"location":"CHANGELOG/#removed_19","title":"Removed","text":""},{"location":"CHANGELOG/#202-2021-06-09","title":"2.0.2 - 2021-06-09","text":""},{"location":"CHANGELOG/#verified-versions_20","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.10</li> <li>Gradle: 7.0.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_20","title":"Added","text":""},{"location":"CHANGELOG/#changed_20","title":"Changed","text":"<ul> <li>#16 Fix NpmPublishTask workingDir scope</li> </ul>"},{"location":"CHANGELOG/#removed_20","title":"Removed","text":""},{"location":"CHANGELOG/#201-2021-05-28","title":"2.0.1 - 2021-05-28","text":""},{"location":"CHANGELOG/#verified-versions_21","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.10</li> <li>Gradle: 7.0.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_21","title":"Added","text":""},{"location":"CHANGELOG/#changed_21","title":"Changed","text":"<ul> <li>Eased <code>duplicationRules</code> for assemble task. Will now warn instead of fail.</li> </ul>"},{"location":"CHANGELOG/#removed_21","title":"Removed","text":""},{"location":"CHANGELOG/#200-2021-05-25","title":"2.0.0 - 2021-05-25","text":""},{"location":"CHANGELOG/#verified-versions_22","title":"Verified Versions","text":"<ul> <li>Kotlin: 1.5.10</li> <li>Gradle: 7.0.2</li> <li>JDK: 11</li> </ul>"},{"location":"CHANGELOG/#added_22","title":"Added","text":""},{"location":"CHANGELOG/#changed_22","title":"Changed","text":"<ul> <li>Plugin id changed from <code>lt.petuska.npm.publish</code> to <code>dev.petuska.npm.publish</code></li> <li>Root package changed to <code>dev.petuska.npm.publish</code>.   To migrate, just replace <code>lt.</code> part to <code>dev.</code> in all imports you might have (tasks, DSL, etc...)</li> </ul>"},{"location":"CHANGELOG/#removed_22","title":"Removed","text":""},{"location":"LICENSE/","title":"License","text":"<p>This is free and unencumbered software released into the public domain.</p> <p>Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.</p> <p>In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>For more information, please refer to https://unlicense.org</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>While the automatic default configuration should cover most of the use-cases, it might still come short for some projects. </p> <p>Worry not, npm-publish is highly customisable, allowing you to tweak anything you wish.</p> <p>The following pages will cover all the configuration options available, their defaults and intended use.</p>"},{"location":"user-guide/quick-start/","title":"Quick Start","text":"<p>Here's a bare minimum setup when using the plugin standalone or together with one of the kotlin plugins.</p> Kotlin/MPPKotlin/JSStandalone build.gradle.kts<pre><code>plugins {\n  id(\"dev.petuska.npm.publish\") version \"&lt;VERSION&gt;\"\n  kotlin(\"multiplatform\") version \"&lt;VERSION&gt;&gt;\"\n}\n\nkotlin {\n  js(IR) {\n    binaries.library()\n    browser() // (1)\n  }\n}\n\nnpmPublish {\n  registries {\n    register(\"npmjs\") {\n      uri.set(uri(\"https://registry.npmjs.org\")) // (2)\n      authToken.set(\"obfuscated\")\n    }\n  }\n}\n</code></pre> <ol> <li><code>nodejs()</code> works too</li> <li><code>uri</code> can also be set from String as <code>uri.set(\"https://registry.npmjs.org\")</code>     in which case the plugin will construct an URI instance from the string for you</li> </ol> build.gradle.kts<pre><code>plugins {\n  id(\"dev.petuska.npm.publish\") version \"&lt;VERSION&gt;\"\n  kotlin(\"js\") version \"&lt;VERSION&gt;&gt;\"\n}\n\nkotlin {\n  js(IR) {\n    binaries.library()\n    browser() // (1)\n  }\n}\n\nnpmPublish {\n  registries {\n    register(\"npmjs\") {\n      uri.set(uri(\"https://registry.npmjs.org\")) // (2)\n      authToken.set(\"obfuscated\")\n    }\n  }\n}\n</code></pre> <ol> <li><code>nodejs()</code> works too</li> <li><code>uri</code> can also be set from String as <code>uri.set(\"https://registry.npmjs.org\")</code>     in which case the plugin will construct an URI instance from the string for you</li> </ol> build.gradle.kts<pre><code>plugins {\n  id(\"dev.petuska.npm.publish\") version \"&lt;VERSION&gt;\"\n}\n\nnpmPublish {\n  packages {\n    register(\"js\") {\n      ...\n    }\n  }\n  registries {\n    register(\"npmjs\") {\n      uri.set(uri(\"https://registry.npmjs.org\")) // (1)\n      authToken.set(\"obfuscated\")\n    }\n  }\n}\n</code></pre> <ol> <li><code>uri</code> can also be set from String as <code>uri.set(\"https://registry.npmjs.org\")</code>     in which case the plugin will construct an URI instance from the string for you</li> </ol> <p>This setup would produce the following tasks:</p> <ul> <li><code>assembleJsNpmPackage: NpmAssembleTask</code></li> <li><code>packJsNpmPackage: NpmPackTask</code></li> <li><code>publishJsPackageToNpmjsRegistry: NpmPublishTask</code></li> </ul> <p>Info</p> <p>One publish task is created for every <code>package</code> + <code>registry</code> combination.  The task is named as <code>publish&lt;PackageName&gt;PackageTo&lt;RegistryName&gt;Registry</code></p>"},{"location":"user-guide/configuration/","title":"Configuration","text":""},{"location":"user-guide/configuration/#summary","title":"Summary","text":"<p>Most of the configurations are hooked up to flow downstream to the eventual task configurations in the priority order, where each layer looks up the chain for default value if an explicit value is not configured for it. This allows setting default values for a lot of downstream configurations once and overriding them only where needed.</p>"},{"location":"user-guide/configuration/#configuration-layers","title":"Configuration Layers","text":"<p>The configuration values are resolved in the following descending priority order:</p> <ol> <li> <p>Properties</p> <ol> <li>CLI options (<code>--arg=value</code>)</li> <li>System properties (<code>-Dprop=value</code>)</li> <li>Gradle properties (<code>-Pprop=value</code>, <code>ORG_GRADLE_PROJECT_prop=value</code> env    variable, <code>-Dorg.gradle.project.prop=value</code>    system property or <code>prop=value</code> stored in <code>gradle.properties</code> file)</li> <li>Env variables (<code>PROP=value</code>)</li> </ol> </li> <li> <p>Extension</p> </li> <li>Package / Registry</li> <li>Tasks</li> </ol> <p>Important</p> <p>The layering only works for properties that have no explicit values set via the DSL as doing so overrides any layering or default behaviour.</p>"},{"location":"user-guide/configuration/extension/","title":"Extension","text":""},{"location":"user-guide/configuration/extension/#summary","title":"Summary","text":"<p>The plugin registers a top level <code>npmPublish: NpmPublishExtension</code> extension for the project as a main entrypoint for most of the plugin configuration options.</p> <p>The extension can be accessed and configured from a <code>build.gradle.kts</code> file by invoking its name.</p> build.gradle.kts<pre><code>npmPublish {\n  ...\n}\n</code></pre>"},{"location":"user-guide/configuration/extension/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>nodeHome</code> Directory <code>NODE_HOME</code> env variable <code>kotlinNodeJsSetup</code> task output <code>nodeBin</code> RegularFile <code>$nodeHome/bin/node</code> <code>npmBin</code> RegularFile <code>$nodeHome/bin/npm</code> <code>readme</code> RegularFile <code>npmIgnore</code> RegularFile <code>$projectDir/.npmignore</code> <code>npmrc</code> RegularFile <code>$projectDir/.npmrc</code> <code>organization</code> String <code>version</code> String <code>Project::version</code> <code>access</code> NpmAccess <code>NpmAccess.PUBLIC</code> <code>dry</code> Boolean <code>false</code> <code>packages</code> NpmPackages <code>registries</code> NpmRegistries Property CLI System/Gradle Environment <code>nodeHome</code> <code>npm.publish.nodeHome</code> <code>NPM_PUBLISH_NODEHOME</code> <code>nodeBin</code> <code>npm.publish.nodeBin</code> <code>NPM_PUBLISH_NODEBIN</code> <code>npmBin</code> <code>npm.publish.npmBin</code> <code>NPM_PUBLISH_NPMBIN</code> <code>readme</code> <code>npm.publish.readme</code> <code>NPM_PUBLISH_README</code> <code>npmIgnore</code> <code>npm.publish.npmIgnore</code> <code>NPM_PUBLISH_NPMIGNORE</code> <code>npmrc</code> <code>npm.publish.npmrc</code> <code>NPM_PUBLISH_NPMRC</code> <code>organization</code> <code>npm.publish.organization</code> <code>NPM_PUBLISH_ORGANIZATION</code> <code>version</code> <code>npm.publish.version</code> <code>NPM_PUBLISH_VERSION</code> <code>access</code> <code>npm.publish.access</code> <code>NPM_PUBLISH_ACCESS</code> <code>dry</code> <code>npm.publish.dry</code> <code>NPM_PUBLISH_DRY</code> <code>packages</code> <code>registries</code> build.gradle.kts<pre><code>npmPublish {\n  nodeHome.set(File(\"/path/to/node\"))\n  nodeBin.set(File(\"/path/to/node/bin/node\"))\n  npmBin.set(File(\"/path/to/node/bin/npm\"))\n  readme.set(rootDir.resolve(\"README.md\"))\n  npmIgnore.set(projectDir.resolve(\".npmIgnore\"))\n  npmrc.set(projectDir.resolve(\".npmrc\"))\n  organization.set(\"${project.group}\")\n  version.set(\"${project.version}\")\n  access.set(RESTRICTED)\n  dry.set(true)\n  packages {\n    ...\n  }\n  registries {\n    ...\n  }\n}\n</code></pre>"},{"location":"user-guide/configuration/extension/#nodehome","title":"<code>nodeHome</code>","text":"<p>Default NodeJS directory to be used when executing npm commands.</p> <p>Info</p> <p>This is set automatically when certain other plugins are applied - <code>org.jetbrains.kotlin.multiplatform</code> &amp; <code>org.jetbrains.kotlin.js</code>: <code>kotlinNodeJsSetup</code> task output - <code>com.github.node-gradle.node</code>: <code>nodeSetup</code> task's <code>NodeSetupTask::nodeDir</code> property</p>"},{"location":"user-guide/configuration/extension/#nodebin","title":"<code>nodeBin</code>","text":"<p>Default node executable to be used when executing node commands. Usually configured by default.</p>"},{"location":"user-guide/configuration/extension/#npmbin","title":"<code>npmBin</code>","text":"<p>Default npm executable to be used when executing npm commands. Usually configured by default.</p>"},{"location":"user-guide/configuration/extension/#readme","title":"<code>readme</code>","text":"<p>A location of the default <code>README.md</code> file. If set, it will be used as a default for all packages that do not have one set explicitly. The file name is ignored and renamed to <code>README.md</code> when assembling.</p>"},{"location":"user-guide/configuration/extension/#npmignore","title":"<code>npmIgnore</code>","text":"<p>A location of the default <code>.npmignore</code> file. If set, it will be used as a default for all packages that do not have one set explicitly.</p>"},{"location":"user-guide/configuration/extension/#npmrc","title":"<code>npmrc</code>","text":"<p>A location of the default <code>.npmrc</code> file. If set, it will be used as a default for all registries that do not have one set explicitly.</p>"},{"location":"user-guide/configuration/extension/#organization","title":"<code>organization</code>","text":"<p>Default package scope. If set, it will be used as a default for all packages that do not have one set explicitly.</p>"},{"location":"user-guide/configuration/extension/#version","title":"<code>version</code>","text":"<p>Default package version. If set, it will be used as a default for all packages that do not have one set explicitly.</p>"},{"location":"user-guide/configuration/extension/#access","title":"<code>access</code>","text":"<p>Default package access when publishing to npm registries. More info</p>"},{"location":"user-guide/configuration/extension/#dry","title":"<code>dry</code>","text":"<p>Specifies if a dry-run should be added to the npm command arguments by default. Dry run does all the normal run does, but without making any modifications to local or remote files.</p>"},{"location":"user-guide/configuration/extension/#packages","title":"<code>packages</code>","text":"<p>A container for npm package configurations.  See Package for detailed description of the container entities.</p>"},{"location":"user-guide/configuration/extension/#registries","title":"<code>registries</code>","text":"<p>A container for npm registry configurations.  See Registry for detailed description of the container entities.</p>"},{"location":"user-guide/configuration/package/","title":"Package","text":""},{"location":"user-guide/configuration/package/#summary","title":"Summary","text":"<p>The packages configure the npm bundles. For each configured <code>NpmPackage</code> <code>assemble&lt;PackageName&gt;Package</code> NpmAssembleTask and <code>pack&lt;PackageName&gt;Package</code> NpmPackTask tasks will be generated and added as dependencies to the <code>assemble</code> and <code>pack</code> lifecycle tasks respectively.</p> <p>The packages can be accessed and configured from a <code>build.gradle.kts</code> file via <code>npmPublish::packages</code> invocation.</p> build.gradle.kts<pre><code>npmPublish {\n  packages {\n    ...\n  }\n}\n</code></pre>"},{"location":"user-guide/configuration/package/#packagejson-resolution","title":"<code>package.json</code> Resolution","text":"<p>During the package assembly, a <code>package.json</code> file is generated from various configuration options.</p> <p>For convenience, some key properties of the file are exposed as a top-level package configurations (such as <code>main</code>). These configurations can be overridden via <code>packageJson</code> DSL, which exposes the entire <code>package.json</code> file structure and allows unrestricted customisation.</p> <p>Alternatively, you could opt in to use <code>packageJsonFile</code> instead, which short-circuits the entire resolution process and instead uses provided static package.json file, fully disregarding all the other <code>package.json</code> configurations.</p> <p>Finally, <code>packageJsonTemplateFile</code> option provides a way to get the best of both worlds. When set, the provided template file will be used as a baseline on which top-level and <code>packageJson</code> DSL configurations are applied. This way you could setup a static part of your <code>package.json</code> file from within the template and only manage dynamic parts such as version and dependencies from the package DSL.</p>"},{"location":"user-guide/configuration/package/#dependency-resolution","title":"Dependency Resolution","text":"<p>NPM dependencies detected/declared for each publication are resolved into relevant <code>package.json</code> dependency block by this priority order (descending priority):</p> <ol> <li>Optional</li> <li>Peer</li> <li>Dev</li> <li>Normal</li> </ol> <p>This ensures that any given dependency does not appear in multiple dependency scopes.</p>"},{"location":"user-guide/configuration/package/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>scope</code> String <code>NpmPublishExtension::organization</code> <code>packageName</code> String <code>Project::name</code> <code>version</code> String <code>NpmPublishExtension::version</code> <code>main</code> String Target's <code>Kotlin2JsCompile::outputFile</code> <code>types</code> String Target's <code>Kotlin2JsCompile::outputFile::nameWithoutExtension</code> + <code>.d.ts</code> <code>readme</code> RegularFile <code>NpmPublishExtension::readme</code> <code>npmIgnore</code> RegularFile <code>NpmPublishExtension::npmIgnore</code> <code>files</code> ConfigurableFileCollection Target's <code>Kotlin2JsCompile</code> and <code>processResources</code> task outputs <code>packageJson</code> PackageJson <code>packageJsonFile</code> RegularFile <code>packageJsonTemplateFile</code> RegularFile <code>dependencies</code> NpmDependencies Target compilations' dependencies Property CLI System/Gradle Environment <code>scope</code> <code>npm.publish.package.&lt;name&gt;.scope</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_SCOPE</code> <code>packageName</code> <code>npm.publish.package.&lt;name&gt;.packageName</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_PACKAGENAME</code> <code>version</code> <code>npm.publish.package.&lt;name&gt;.version</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_VERSION</code> <code>main</code> <code>npm.publish.package.&lt;name&gt;.main</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_MAIN</code> <code>types</code> <code>npm.publish.package.&lt;name&gt;.types</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_TYPES</code> <code>readme</code> <code>npm.publish.package.&lt;name&gt;.readme</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_README</code> <code>npmIgnore</code> <code>npm.publish.package.&lt;name&gt;.npmIgnore</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_NPMIGNORE</code> <code>files</code> <code>packageJson</code> <code>packageJsonFile</code> <code>npm.publish.package.&lt;name&gt;.packageJsonFile</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_PACKAGEJSONFILE</code> <code>packageJsonTemplateFile</code> <code>npm.publish.package.&lt;name&gt;.packageJsonTemplateFile</code> <code>NPM_PUBLISH_PACKAGE_&lt;NAME&gt;_PACKAGEJSONTEMPLATEFILE</code> <code>dependencies</code> build.gradle.kts<pre><code>npmPublish {\n  packages {\n    register(\"js\") {\n      scope.set(group as String)\n      packageName.set(\"coolio\")\n      version.set(\"4.20.69\")\n      main.set(\"main.js\")\n      types.set(\"main.d.ts\")\n      readme.set(rootDir.resolve(\"README.md\"))\n      npmIgnore.set(rootDir.resolve(\".npmignore\"))\n      files {\n        from(\"some/path\")\n      }\n      packageJson {\n        ...\n      }\n      packageJsonFile.set(projectDir.resolve(\"package.json\"))\n      packageJsonTemplateFile.set(projectDir.resolve(\"package.template.json\"))\n      this.dependencies { // (1)\n        optional(\"axios\", \"*\")\n        peer(\"axios\", \"*\")\n        dev(\"axios\", \"*\")\n        normal(\"axios\", \"*\")\n      }\n    }\n  }\n}\n</code></pre> <ol> <li><code>this</code> is required in gradle &gt; 8.1.1</li> </ol>"},{"location":"user-guide/configuration/package/#scope","title":"<code>scope</code>","text":"<p>Optional npm scope. If set, the package name will be constructed as <code>@{scope}/{packageName}</code></p>"},{"location":"user-guide/configuration/package/#packagename","title":"<code>packageName</code>","text":"<p>NPM package name. Can be overridden via <code>packageJson</code> DSL's <code>name</code> property</p>"},{"location":"user-guide/configuration/package/#version","title":"<code>version</code>","text":"<p>NPM package name. Can be overridden via <code>packageJson</code> DSL's <code>version</code> property</p>"},{"location":"user-guide/configuration/package/#main","title":"<code>main</code>","text":"<p>Main <code>.js</code> entry file relative to the <code>package.json</code> file. Can be overridden via <code>packageJson</code> DSL's <code>main</code> property</p>"},{"location":"user-guide/configuration/package/#types","title":"<code>types</code>","text":"<p>Main <code>.d.ts</code> entry file relative to the <code>package.json</code> file. Can be overridden via <code>packageJson</code> DSL's <code>types</code> property</p>"},{"location":"user-guide/configuration/package/#readme","title":"<code>readme</code>","text":"<p>A location of the <code>README.md</code> file. If set, the file will be moved to package assembly root and renamed to README.md (regardless of the actual name).</p>"},{"location":"user-guide/configuration/package/#npmignore","title":"<code>npmIgnore</code>","text":"<p>A location of the <code>.npmignore</code> file.</p>"},{"location":"user-guide/configuration/package/#files","title":"<code>files</code>","text":"<p>Specification of files that should be assembled for this package. It uses standard Gradle's CopySpec to declare copying hierarchies and filtering rules. More info</p>"},{"location":"user-guide/configuration/package/#packagejson","title":"<code>packageJson</code>","text":"<p><code>package.json</code> customisation container. All values set here will override top-level configurations like <code>types</code></p> <p>The container is modelled on top of Map-like structure with additional standard <code>package.json</code> fields added as explicit properties. This means that not only you can configure standard <code>package.json</code> file in a type-safe manner, but also add arbitrary fields of your own.</p> build.gradle.kts<pre><code>npmPublish {\n  packages {\n    named(\"js\") {\n      packageJson {\n        \"customNestedObject\" by {\n          \"nestedField\" by \"ok\"\n        }\n        \"customArray\" by arrayOf(1,2,3)\n        \"customObjectArray\" by arrayOf(json {\n          \"nestedField\" by 1\n        })\n        \"customField\" by true\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"user-guide/configuration/package/#packagejsonfile","title":"<code>packageJsonFile</code>","text":"<p>Path to a static <code>package.json</code> file. If set, fully disregards all related <code>package.json</code> configurations and is used as-is.</p>"},{"location":"user-guide/configuration/package/#packagejsontemplatefile","title":"<code>packageJsonTemplateFile</code>","text":"<p>Path to a baseline <code>package.json</code> template file. Similar to <code>packageJsonFile</code> except allows the options to be overridden by the <code>packageJson</code> and top-level options.</p>"},{"location":"user-guide/configuration/package/#dependencies","title":"<code>dependencies</code>","text":"<p>Note</p> <p>Since gradle <code>8.1.1</code> it is required to use explicit <code>this</code> receiver to access <code>dependencies</code> block <pre><code>this.dependencies {\n}\n</code></pre></p> <p>Package's npm dependency container. It can be configured by invoking the property and using provided , <code>optional</code>, <code>peer</code>, <code>dev</code> and <code>normal</code> DSLs.</p> build.gradle.kts<pre><code>npmPublish {\n  packages {\n    named(\"js\") {\n      dependencies {\n        optional(\"axios\", \"*\")\n        peer(\"axios\", \"*\")\n        dev(\"axios\", \"*\")\n        normal(\"axios\", \"*\")\n      }\n    }\n  }\n}\n</code></pre> <p>Info</p> <p>Dependencies are deduplicated during resolution to avoid multiple occurrences of a dependency across different dependency scopes</p>"},{"location":"user-guide/configuration/properties/","title":"Properties","text":""},{"location":"user-guide/configuration/properties/#summary","title":"Summary","text":"<p>Most of the configuration options are set to be configurable via various CLI inputs and follow a configuration layers order. Such CLI properties can be passed in four different ways - Gradle CLI Options, System Properties, Gradle Extra Properties, Gradle Properties and Environment Variables.</p>"},{"location":"user-guide/configuration/properties/#gradle-cli-options","title":"Gradle CLI Options","text":"<p>Gradle CLI options are only available for the tasks and can be passed in by specifying their keys prefixed with double hyphens (<code>--</code>) right after the task name. Boolean properties can omit the value when representing <code>true</code> states.</p> /bin/bash<pre><code>./gradlew publishJsPackageToNpmjsRegistry --dry --authToken=\"obfuscated\"\n</code></pre>"},{"location":"user-guide/configuration/properties/#system-properties","title":"System Properties","text":"<p>System properties are only available for the configurations and can be passed in by specifying their keys prefixed with <code>-D</code> anywhere on the command line. Boolean properties can omit the value when representing <code>true</code> states.</p> /bin/bash<pre><code>./gradlew publishJsPackageToNpmjsRegistry -Dnpm.publish.registry.npmjs.dry -Dnpm.publish.registry.npmjs.authToken=\"obfuscated\"\n</code></pre>"},{"location":"user-guide/configuration/properties/#gradle-extra-properties","title":"Gradle Extra Properties","text":"<p>Gradle extra properties are only available for the configurations and can be passed in via <code>extra</code> project extension. This can be useful for multi-module builds that needs to configure other modules from submodules. Boolean properties can omit the value when representing <code>true</code> states.</p> build.gradle.kts<pre><code>extra.properties[\"npm.publish.registry.npmjs.dry\"] = null\nextra.properties[\"npm.publish.registry.npmjs.authToken\"] = \"obfuscated\"\n</code></pre>"},{"location":"user-guide/configuration/properties/#gradle-properties","title":"Gradle Properties","text":"<p>Gradle properties are only available for the configurations and can be passed in by specifying their keys prefixed with <code>-P</code> anywhere on the command line or via the <code>gradle.properties</code> file. Boolean properties can omit the value when representing <code>true</code> states.</p> CLIgradle.properties /bin/bash<pre><code>./gradlew publishJsPackageToNpmjsRegistry -Pnpm.publish.registry.npmjs.dry -Pnpm.publish.registry.npmjs.authToken=\"obfuscated\"\n</code></pre> gradle.properties<pre><code>npm.publish.registry.npmjs.dry=\nnpm.publish.registry.npmjs.authToken=\"obfuscated\"\n</code></pre>"},{"location":"user-guide/configuration/properties/#environment-variables","title":"Environment Variables","text":"<p>Environment variables are only available for the configurations and can be passed in by specifying their uppercase keys in the current process's environment. Boolean properties can omit the value when representing <code>true</code> states.</p> /bin/bash<pre><code>export NPM_PUBLISH_REGISTRY_NPMJS_DRY=\nexport NPM_PUBLISH_REGISTRY_NPMJS_AUTHTOKEN=\"obfuscated\"\n./gradlew publishJsPackageToNpmjsRegistry\n</code></pre>"},{"location":"user-guide/configuration/registry/","title":"Registry","text":""},{"location":"user-guide/configuration/registry/#summary","title":"Summary","text":"<p>The registries configure publication targets and their authentication. For each configured <code>NpmRegistry</code> and <code>NpmPackage</code> combination, a unique <code>publish&lt;PackageName&gt;PackageTo&lt;RegistryName&gt;Registry</code> NpmPublishTask will be generated and added as a dependency to the <code>publish</code> lifecycle task.</p> <p>The registries can be accessed and configured from a <code>build.gradle.kts</code> file via <code>npmPublish::registries</code> invocation.</p> build.gradle.kts<pre><code>npmPublish {\n    registries {\n        ...\n    }\n}\n</code></pre>"},{"location":"user-guide/configuration/registry/#shortcuts","title":"Shortcuts","text":"<p>Some shortcuts are also available for common npm registries. These shortcuts simply name the registry and sets the appropriate uri for you. The names of the registries match the DSL name. Finally, the shortcuts are repeatable and will detect and configure existing registries on subsequent invocations.</p> build.gradle.kts<pre><code>npmPublish {\n    registries {\n        npmjs {\n            authToken.set(\"obfuscated\")\n        }\n        github {\n            authToken.set(\"obfuscated\")\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/configuration/registry/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>access</code> NpmAccess <code>NpmPublishExtension::access</code> <code>dry</code> NpmAccess <code>NpmPublishExtension::dry</code> <code>uri</code> URI <code>otp</code> String <code>authToken</code> String <code>auth</code> String <code>username</code> String <code>password</code> String <code>npmrc</code> RegularFile <code>NpmPublishExtension::npmrc</code> Property CLI System/Gradle Environment <code>access</code> <code>npm.publish.registry.&lt;name&gt;.access</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_ACCESS</code> <code>dry</code> <code>npm.publish.registry.&lt;name&gt;.dry</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_DRY</code> <code>uri</code> <code>npm.publish.registry.&lt;name&gt;.uri</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_URI</code> <code>otp</code> <code>npm.publish.registry.&lt;name&gt;.otp</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_OTP</code> <code>authToken</code> <code>npm.publish.registry.&lt;name&gt;.authToken</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_AUTHTOKEN</code> <code>auth</code> <code>npm.publish.registry.&lt;name&gt;.auth</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_AUTH</code> <code>username</code> <code>npm.publish.registry.&lt;name&gt;.username</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_USERNAME</code> <code>password</code> <code>npm.publish.registry.&lt;name&gt;.password</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_PASSWORD</code> <code>npmrc</code> <code>npm.publish.registry.&lt;name&gt;.npmrc</code> <code>NPM_PUBLISH_REGISTRY_&lt;NAME&gt;_NPMRC</code> build.gradle.kts<pre><code>npmPublish {\n  registries {\n    register(\"npmjs\") {\n      access.set(RESTRICTED)\n      dry.set(true)\n      uri.set(uri(\"https://registry.npmjs.org\")) // (1)\n      otp.set(\"obfuscated\")\n      // Either (2)\n      authToken.set(\"obfuscated\")\n      // or\n      auth.set(\"obfuscated\")\n      // or\n      username.set(\"obfuscated\")\n      password.set(\"obfuscated\")\n      npmrc.set(projectDir.resolve(\".npmrc\"))\n    }\n  }\n}\n</code></pre> <ol> <li><code>uri</code> can also be set from String as <code>uri.set(\"https://registry.npmjs.org\")</code>      in which case the plugin will construct an URI instance from the string for you</li> <li>Only one of <code>authToken</code>, <code>auth</code> or <code>username</code> + <code>password</code> should be specified.</li> </ol>"},{"location":"user-guide/configuration/registry/#access","title":"<code>access</code>","text":"<p>Registry access. More info</p>"},{"location":"user-guide/configuration/registry/#dry","title":"<code>dry</code>","text":"<p>Overrides NpmPublishExtension::dry value for this registry</p>"},{"location":"user-guide/configuration/registry/#uri","title":"<code>uri</code>","text":"<p>NPM registry uri to publish packages to. Should include schema domain and path if required. Can be set from <code>URI</code> or <code>String</code></p>"},{"location":"user-guide/configuration/registry/#otp","title":"<code>otp</code>","text":"<p>Optional OTP to use when authenticating with the registry</p>"},{"location":"user-guide/configuration/registry/#authtoken","title":"<code>authToken</code>","text":"<p>Auth token to use when authenticating with the registry. More info</p> <p>Note</p> <p>Only one of <code>authToken</code>, <code>auth</code> or <code>username</code> + <code>password</code> should be provided.</p>"},{"location":"user-guide/configuration/registry/#auth","title":"<code>auth</code>","text":"<p>Base64 authentication string when authenticating with the registry.</p> <p>Note</p> <p>Only one of <code>authToken</code>, <code>auth</code> or <code>username</code> + <code>password</code> should be provided.</p>"},{"location":"user-guide/configuration/registry/#username","title":"<code>username</code>","text":"<p>Username to use when authenticating with the registry. Should always be specified together with a password.</p> <p>Note</p> <p>Only one of <code>authToken</code>, <code>auth</code> or <code>username</code> + <code>password</code> should be provided.</p>"},{"location":"user-guide/configuration/registry/#password","title":"<code>password</code>","text":"<p>Password to use when authenticating with the registry. Should always be specified together with a username.</p> <p>Note</p> <p>Only one of <code>authToken</code>, <code>auth</code> or <code>username</code> + <code>password</code> should be provided.</p>"},{"location":"user-guide/configuration/registry/#npmrc","title":"<code>npmrc</code>","text":"<p>An optional <code>.npmrc</code> to use when publishing packages to this registry.</p>"},{"location":"user-guide/tasks/NodeExecTask/","title":"NodeExecTask","text":""},{"location":"user-guide/tasks/NodeExecTask/#summary","title":"Summary","text":"<p>Basic task for executing various node commands. Provides access to node executable.</p> <p>The task can be created and configured in a <code>build.gradle.kts</code> file by registering it with correct type.</p> build.gradle.kts<pre><code>tasks {\n    register(\"name\", dev.petuska.npm.publish.task.NodeExecTask::class) {\n        ...\n    }\n}\n</code></pre>"},{"location":"user-guide/tasks/NodeExecTask/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>nodeHome</code> DirectoryProperty <code>NODE_HOME</code> env variable <code>kotlinNodeJsSetup</code> task output <code>node</code> RegularFileProperty <code>$nodeHome/bin/node</code> Property CLI System/Gradle Environment <code>nodeHome</code> <code>--nodeHome</code> <code>NODE_HOME</code> build.gradle.kts<pre><code>tasks {\n  register(\"name\", dev.petuska.npm.publish.task.NodeExecTask::class) {\n    nodeHome.set(layout.projectDirectory.dir(\"/usr/share/node\"))\n    node.set(layout.projectDirectory.dir(\"/usr/share/node/bin/node\"))\n    doLast {\n      val args = listOf(\"--help\")\n      nodeExec(args)\n    }\n  }\n}\n</code></pre>"},{"location":"user-guide/tasks/NodeExecTask/#nodehome","title":"<code>nodeHome</code>","text":"<p>Base NodeJS directory used to extract other node executables from.</p>"},{"location":"user-guide/tasks/NodeExecTask/#node","title":"<code>node</code>","text":"<p>Direct node executable.</p>"},{"location":"user-guide/tasks/NpmAssembleTask/","title":"NpmAssembleTask","text":""},{"location":"user-guide/tasks/NpmAssembleTask/#summary","title":"Summary","text":"<p>A task to assemble all required files for a given NpmPackage. The task can be created and configured in a <code>build.gradle.kts</code> file by registering it with correct type.</p> build.gradle.kts<pre><code>tasks {\n  register(\"name\", dev.petuska.npm.publish.task.NpmAssembleTask::class) {\n    ...\n  }\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmAssembleTask/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>package</code> NpmPackage <code>destinationDir</code> Directory <code>$buildDir/packages/&lt;package.name&gt;</code> Property CLI System/Gradle Environment <code>package</code> <code>destinationDir</code> <code>--destinationDir</code> build.gradle.kts<pre><code>tasks {\n  register(\"name\", dev.petuska.npm.publish.task.NpmAssembleTask::class) {\n    `package` {\n      ...\n    }\n    destinationDir.set(layout.buildDirectory.dir(\"js/main\"))\n  }\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmAssembleTask/#package","title":"<code>package</code>","text":"<p>The configuration of the package to assemble.</p>"},{"location":"user-guide/tasks/NpmAssembleTask/#destinationdir","title":"<code>destinationDir</code>","text":"<p>Output directory to assemble the package to.</p>"},{"location":"user-guide/tasks/NpmExecTask/","title":"NpmExecTask","text":""},{"location":"user-guide/tasks/NpmExecTask/#summary","title":"Summary","text":"<p>Basic task for executing various npm commands. Extends NodeExecTask and provides access to npm executable.</p> <p>The task can be created and configured in a <code>build.gradle.kts</code> file by registering it with correct type.</p> build.gradle.kts<pre><code>tasks {\n  register(\"name\", dev.petuska.npm.publish.task.NpmExecTask::class) {\n    ...\n  }\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmExecTask/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>npm</code> RegularFileProperty <code>$nodeHome/bin/npm</code> Property CLI System/Gradle Environment build.gradle.kts<pre><code>tasks {\n  register(\"name\", dev.petuska.npm.publish.task.NpmExecTask::class) {\n    npm.set(layout.projectDirectory.dir(\"/usr/share/node/bin/npm\"))\n    doLast {\n      val args = listOf(\"--help\")\n      npmExec(args)\n    }\n  }\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmExecTask/#npm","title":"<code>npm</code>","text":"<p>Direct npm executable.</p>"},{"location":"user-guide/tasks/NpmPackTask/","title":"NpmPackTask","text":""},{"location":"user-guide/tasks/NpmPackTask/#summary","title":"Summary","text":"<p>A task to pack a <code>.tgz</code> archive for the given package. Extends NpmExecTask.</p> <p>The task can be created and configured in a <code>build.gradle.kts</code> file by registering it with correct type.</p> build.gradle.kts<pre><code>tasks {\n  register(\"name\", dev.petuska.npm.publish.task.NpmPackTask::class) {\n    ...\n  }\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmPackTask/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>packageDir</code> DirectoryProperty <code>dry</code> Boolean false <code>outputFile</code> RegularFile <code>$buildDir/packages/&lt;scope&gt;-&lt;name&gt;-&lt;version&gt;.tgz</code> Property CLI System/Gradle Environment <code>packageDir</code> <code>dry</code> <code>--dry</code> <code>outputFile</code> <code>--outputFile</code> build.gradle.kts<pre><code>tasks {\n  register(\"name\", dev.petuska.npm.publish.task.NpmPackTask::class) {\n    packageDir.set(layout.projectDirectory.dir(\"src/main/js\"))\n    dry.set(true)\n    outputFile.set(layout.buildDirectory.dir(\"js/main\"))\n  }\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmPackTask/#packagedir","title":"<code>packageDir</code>","text":"<p>The directory where the assembled and ready-to-pack package is.</p>"},{"location":"user-guide/tasks/NpmPackTask/#dry","title":"<code>dry</code>","text":"<p>Controls dry-tun mode for the execution. When enabled, npm pack command will be run with a switch that does everything it normally would except creating the tarball.</p>"},{"location":"user-guide/tasks/NpmPackTask/#outputfile","title":"<code>outputFile</code>","text":"<p>Output file to pack the publication to.</p>"},{"location":"user-guide/tasks/NpmPublishTask/","title":"NpmPublishTask","text":""},{"location":"user-guide/tasks/NpmPublishTask/#summary","title":"Summary","text":"<p>A task to publish a given NpmPackage to a given NpmRegistry. The task can be created and configured in a <code>build.gradle.kts</code> file by registering it with correct type.</p> build.gradle.kts<pre><code>tasks {\n  register(\"name\", dev.petuska.npm.publish.task.NpmPublishTask::class) {\n    ...\n  }\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmPublishTask/#properties","title":"Properties","text":"PropertiesKeysUsage Property Type Default When Kotlin plugin is present <code>registry</code> NpmRegistry <code>packageDir</code> Directory <code>dry</code> Boolean false <code>tag</code> String Property CLI System/Gradle Environment <code>registry</code> <code>packageDir</code> <code>dry</code> <code>--dry</code> <code>tag</code> <code>--tag</code> build.gradle.kts<pre><code>tasks {\n  register(\"name\", dev.petuska.npm.publish.task.NpmPublishTask::class) {\n    registry {\n      ...\n    }\n    packageDir.set(layout.projectDirectory.dir(\"src/main/js\"))\n    dry.set(true)\n    tag.set(\"latest\")\n  }\n}\n</code></pre>"},{"location":"user-guide/tasks/NpmPublishTask/#registry","title":"<code>registry</code>","text":"<p>A registry to publish to</p>"},{"location":"user-guide/tasks/NpmPublishTask/#packagedir","title":"<code>packageDir</code>","text":"<p>The directory where the assembled and ready-to-publish package is</p>"},{"location":"user-guide/tasks/NpmPublishTask/#dry","title":"<code>dry</code>","text":"<p>Controls dry-tun mode for the execution.</p>"},{"location":"user-guide/tasks/NpmPublishTask/#tag","title":"<code>tag</code>","text":"<p>Sets a tag to label published package version More info</p>"}]}